void calculateRecursiveCooleyTukeyFFT(ComplexArray& x)
{
    const size_t N = x.size();
    if (N <= 1)
        return;
    ComplexArray even = x[slice(0, N/2, 2)];
    ComplexArray  odd = x[slice(1, N/2, 2)];

    calculateRecursiveCooleyTukeyFFT(even);
    calculateRecursiveCooleyTukeyFFT(odd);
    for (size_t k = 0; k < N/2; ++k)
    {
        Complex t = std::polar(1.0, -2 * PI * k / N) * odd[k];
        x[k] = even[k] + t;
        x[k+N/2] = even[k] - t;
    }
}







        template<typename T>
        std::vector<complex<T>> Cooley_tukey<T>::FFT_REC(std::vector<complex<T>>& temp, int total_time)
        {
        	// Check if it is split up enough
        	if (total_time >= 2)
        	{

        		// Split even and odds up
        		std::vector<complex<T>> odd[total_time/2];
        		std::vector<complex<T>> even[total_time/2];
        		for (int i = 0; i < total_time / 2; i++)
        		{
        			even->at(i) = temp.at(i*2);
        			odd->at(i) 	= temp.at(i*2+1);
        		}

        		// Split up tasks through FFT recursion method
        		FFT_REC(even, total_time/2);
        		FFT_REC(odd, total_time/2);


        		// DFT portion of FFT - calculates after everything has been split up through FFT_REC
        		for (int frequency = 0; frequency < total_time / 2; frequency += this->frequency_step)
        		{
        			std::complex<T> t = exp(std::complex<T>(0, -2 * M_PI * frequency / total_time)) * odd->at(frequency);

        			//Result of Cooley-Tukey algorithm:
        				//*This gives us the frequency values at certain times
        			temp.at(frequency) = even->at(frequency) + t;
        			temp.at(total_time / 2 + frequency) = even->at(frequency) - t;

        		}
        	}
        	return temp;
        }

        template class Cooley_tukey<double>;
